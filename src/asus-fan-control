#!/bin/sh

#-------------------------------------------------------------------------------
# Copyright 2017-2020 Dominik Salvet
# github.com/dominiksalvet/asus-fan-control
#-------------------------------------------------------------------------------
# DESCRIPTION:
#   This is asus-fan-control, fan control for ASUS devices running Linux.
# PARAMETERS:
#   All given arguments are processed as asus-fan-control's help describes.
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# MAIN FUNCTION
#-------------------------------------------------------------------------------

# DESCRIPTION:
#   This is the asus-fan-control entry point and it is expected to be executed
#   first, yet its calling should be at the end of this script.
# PARAMETERS:
#   $@ - asus-fan-control arguments
main() {
    check_commands &&
    init_constants &&
    init_strings &&
    init_paths &&
    init_config &&
    process_args "$@" # process all given asus-fan-control arguments
}

# DESCRIPTION:
#   Checks whether used commands are present.
check_commands() (
    # a list of required commands
    commands='command echo [ cut id wc dmidecode read tr cat test'

    for command in $commands; do # check if any command is missing
        if ! command -v "$command" > /dev/null; then
            echo "missing $command command" >&2; return 1
        fi
    done
)

#-------------------------------------------------------------------------------
# STATIC INITIALIZATION
#-------------------------------------------------------------------------------

# DESCRIPTION:
#   Initializes static constants.
init_constants() {
    # the current version of asus-fan-control
    readonly VERSION=2.12.0

    # useful asus-fan-control shortcuts
    readonly LABEL_DEFAULT=default
}

# DESCRIPTION:
#   Initializes strings used to display output to end users. Constants must be
#   already initialized.
init_strings() {
    readonly HELP_MESSAGE="USAGE:
  asus-fan-control [set-temps $LABEL_DEFAULT | TEMPERATURES]
  asus-fan-control get-temps | help | about

COMMAND:
  set-temps  apply and store fan temperatures
  get-temps  get fan temperatures"

    readonly ABOUT_MESSAGE="asus-fan-control $VERSION
Fan control for ASUS devices running Linux.

Copyright 2017-2020 Dominik Salvet
github.com/dominiksalvet/asus-fan-control"
}

# DESCRIPTION:
#   Initializes all asus-fan-control's paths. They must be absolute paths.
init_paths() {
    # asus-fan-control paths
    readonly MODELS_PATH=/usr/share/asus-fan-control/models # models database
    readonly TEMPS_PATH=/etc/asus-fan-control/temps # stored temperatures

    # ACPI related
    readonly ACPI_CALL_PATH=/proc/acpi/call # ACPI interface file location
}

# DESCRIPTION:
#   Initializes asus-fan-control configuration constants.
init_config() {
    # ACPI related
    readonly ACPI_WRITE_COMMAND='\_SB.PCI0.LPCB.EC0.WRAM' # write to ACPI
    readonly ACPI_READ_COMMAND='\_SB.PCI0.LPCB.EC0.RRAM' # read from ACPI

    # default configuration
    readonly DEFAULT_ADDR=1335 # default base address for fan configuration
    readonly DEFAULT_TEMPS='55 60 62 65 68 72 76 80' # default fan temperatures
}

#-------------------------------------------------------------------------------
# ARGUMENT PROCESSING
#-------------------------------------------------------------------------------

# DESCRIPTION:
#   Processes given asus-fan-control arguments and performs all associated
#   operations.
# PARAMETERS:
#   $@ - asus-fan-control arguments
process_args() {
    if [ "$#" -eq 0 ]; then # if no argument given
        set_temps # use stored temperatures
    else
        case "$1" in # process arguments based on the first argument
            set-temps) shift && set_temps "$*" ;;
            get-temps) get_temps ;;
            help) echo "$HELP_MESSAGE" ;;
            about) echo "$ABOUT_MESSAGE" ;;
            *) echo "invalid argument $1" >&2; return 1 ;;
        esac
    fi
}

#-------------------------------------------------------------------------------
# SET TEMPERATURES
#-------------------------------------------------------------------------------

# DESCRIPTION:
#   Applies given temperatures (or default ones in case 'default' is delivered)
#   and store them. If no temperatures are delivered, last stored are applied.
# PARAMETERS:
#   $1 - temperatures (optional)
set_temps() (
    check_acpi &&
    model="$(get_host_model)" && # get database record for current device

    if [ ! "$1" ]; then # last stored temperatures
        set_stored_temps "$model"
    elif [ "$1" = "$LABEL_DEFAULT" ]; then # default model temperatures
        set_default_temps "$model"
    else
        set_custom_temps "$model" "$1"
    fi
)

# DESCRIPTION:
#   Applies stored temperatures if they exist. Otherwise, applies default ones
#   and stores them. Any temperature modifications are based on a given model,
#   for which they should be applied.
# PARAMETERS:
#   $1 - model record
set_stored_temps() (
    if [ -r "$TEMPS_PATH" ]; then # if stored temperatures exist
        addr="$(get_model_addr "$1")" && # extract given model base address
        temps="$(cat "$TEMPS_PATH")" && # load temperatures from the file
        set_acpi_temps "$addr" "$temps" # apply temperatures
    else # default temperatures will be used
        set_default_temps "$1"
    fi
)

# DESCRIPTION:
#   Applies default temperatures based on a given model record and store them.
# PARAMETERS:
#   $1 - model record
set_default_temps() (
    addr="$(get_model_addr "$1")" && # extract base address
    temps="$(get_model_temps "$1")" && # extract temperatures

    set_acpi_temps "$addr" "$temps" && # apply temperatures
    store_temps "$temps" # after success, store temperatures
)

# DESCRIPTION:
#   Checks given temperatures, applies them based on a given model record and
#   store them.
# PARAMETERS:
#   $1 - model record
#   $2 - temperatures
set_custom_temps() (
    # check given temperatures whether they are valid for the given model
    if ! check_temps "$1" "$2"; then
        echo 'invalid custom temperatures' >&2; return 1
    fi

    addr="$(get_model_addr "$1")" && # extract base address
    set_acpi_temps "$addr" "$2" && # apply temperatures
    store_temps "$2" # after success, store temperatures
)

#-------------------------------------------------------------------------------
# TEMPERATURES
#-------------------------------------------------------------------------------

# DESCRIPTION:
#   Stores given temperatures into the temps file for later use.
# PARAMETERS:
#   $1 - temperatures
store_temps() {
    echo "$1" > "$TEMPS_PATH"
}

# DESCRIPTION:
#   Checks whether the second argument represents valid temperatures for a given
#   device model.
# PARAMETERS:
#   $1 - model record
#   $2 - any
check_temps() (
    temps_count=0; previous_temp=0 # prepare initial state
    for temp in $2; do # for each word in the argument (for each temperature)
        check_pos_number "$temp" && # check whether it is a positive number
        test "$temp" -gt "$previous_temp" && # must be greater than previous
        previous_temp="$temp" && # store as previous
        temps_count="$((temps_count + 1))" || return # increase temps count
    done

    # check that temperatures count is matching the given model
    model_temps="$(get_model_temps "$1")" &&
    model_temps_count="$(echo "$model_temps" | wc -w)" &&
    test "$temps_count" -eq "$model_temps_count"
)

# DESCRIPTION:
#   Checks whether a given argument is a positive number.
# PARAMETERS:
#   $1 - any
check_pos_number() {
    test "$1" -eq "$1" 2>/dev/null && # true only for integer arguments
    test "$1" -ge 0 # the number must be positive
}

#-------------------------------------------------------------------------------
# GET TEMPERATURES
#-------------------------------------------------------------------------------

# DESCRIPTION:
#   Prints applied fan temperatures based on the current environment.
get_temps() (
    check_acpi &&

    model="$(get_host_model)" && # get database record for current device
    addr="$(get_model_addr "$model")" && # extract base address
    temps="$(get_model_temps "$model")" && # extract temperatures
    temps_count="$(echo "$temps" | wc -w)" && # number of temperatures

    get_acpi_temps "$addr" "$temps_count" # get real ACPI temperatures
)

#-------------------------------------------------------------------------------
# ACPI
#-------------------------------------------------------------------------------

# DESCRIPTION:
#   Checks whether it is possible to perform an ACPI call.
check_acpi() (
    if [ ! -f "$ACPI_CALL_PATH" ]; then # check if ACPI interface file exists
        echo "file $ACPI_CALL_PATH does not exist" >&2; return 1
    fi

    id_out="$(id -u)" && # check if running as root
    if [ "$id_out" -ne 0 ]; then
        echo 'root permissions needed' >&2; return 1
    fi
)

# DESCRIPTION:
#   Sets given fan temperatures using ACPI calls based on a given base address.
# PARAMETERS:
#   $1 - base address
#   $2 - temperatures
set_acpi_temps() (
    temps_count=0 # current temperature index
    for temp in $2; do # for each temperature
        # write the current temperature to ACPI
        set_acpi_temp "$(($1 + temps_count))" "$temp" &&
        temps_count="$((temps_count + 1))" || return # next temperature
    done
)

# DESCRIPTION:
#   Sets a given ACPI address to a given temperature value.
# PARAMETERS:
#   $1 - address
#   $2 - temperature
set_acpi_temp() (
    # ACPI write call (invalid arguments may cause the current shell to exit)
    echo "$ACPI_WRITE_COMMAND ${1:?} ${2:?}" > "$ACPI_CALL_PATH"
)

# DESCRIPTION:
#   Prints fan temperatures using ACPI calls based on a given base address and
#   the number of the temperatures.
# PARAMETERS:
#   $1 - base address
#   $2 - number of temperatures
get_acpi_temps() (
    temps= # list of read temperatures

    temps_count=0 # current temperature index
    while [ "$temps_count" -lt "$2" ]; do # read all temperatures
        # read the temperature of the current index from ACPI
        temp="$(get_acpi_temp "$(($1 + temps_count))")" &&
        temps="${temps}$temp " && # add temperature to list
        temps_count="$((temps_count + 1))" || return # next temperature
    done

    echo "${temps% }" # print read temperatures (omitting the last space)
)

# DESCRIPTION:
#   Prints a temperature value of a given ACPI address in a decimal form.
# PARAMETERS:
#   $1 - address
get_acpi_temp() (
    echo "$ACPI_READ_COMMAND ${1:?}" > "$ACPI_CALL_PATH" && # ACPI read call
    temp="$(cut -c 1-4 "$ACPI_CALL_PATH")" && # parse temperature of the output
    temp="$((temp))" && # convert from hexadecimal to decimal
    echo "$temp" # print the final temperature value
)

#-------------------------------------------------------------------------------
# MODELS
#-------------------------------------------------------------------------------

# DESCRIPTION:
#   Detects the current device model name and prints its first database record
#   if it exists. Otherwise, prints a temporary database record based on the
#   current device model name and default base address and temperatures values.
get_host_model() (
    host_model_name="$(dmidecode -s system-product-name)" && # detect host
    # keep only alphanumerical characters
    host_model_name="$(echo "$host_model_name" | tr -d -c '[:alnum:]')" &&

    while IFS= read -r model; do # for each database record
        model_name="$(get_model_name "$model")" || return # extract its name
        if [ "$model_name" = "$host_model_name" ]; then # compare with the host
            echo "$model"; return # if match, print database record and return
        fi
    done < "$MODELS_PATH" &&

    # temporary database record in case the current model is not in the database
    echo "$host_model_name|$DEFAULT_ADDR|$DEFAULT_TEMPS" # use default values
)

# DESCRIPTION:
#   Extracts the model name from a given model record.
# PARAMETERS:
#   $1 - model record
get_model_name() {
    echo "$1" | cut -f 1 -d '|' -s
}

# DESCRIPTION:
#   Extracts the model base address from a given model record.
# PARAMETERS:
#   $1 - model record
get_model_addr() {
    echo "$1" | cut -f 2 -d '|' -s
}

# DESCRIPTION:
#   Extracts the model temperatures from a given model record.
# PARAMETERS:
#   $1 - model record
get_model_temps() {
    echo "$1" | cut -f 3 -d '|' -s
}

#-------------------------------------------------------------------------------
# CALL MAIN
#-------------------------------------------------------------------------------

main "$@" # call the main function, having all functions above already defined
