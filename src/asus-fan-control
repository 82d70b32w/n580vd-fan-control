#!/bin/sh

#-------------------------------------------------------------------------------
# Copyright 2017-2019 Dominik Salvet
# SPDX-License-Identifier: MIT
# https://github.com/dominiksalvet/asus-fan-control
#-------------------------------------------------------------------------------


#-------------------------------------------------------------------------------
# SOFTWARE DEPENDENCIES
#-------------------------------------------------------------------------------

# list of required software
SW_REQUIRED='command echo [ grep lsmod head id rm cut mkdir sed dmidecode'

# check if some software is missing
for i in $SW_REQUIRED; do
    # software is missing if at least one piece of software is missing
    if ! command -v "$i" > /dev/null; then
        echo "$0: Required software $i is missing.
POSSIBLE SOLUTIONS:
  * Use command 'sudo apt install $i'." >&2
        exit 1
    fi
done

#-------------------------------------------------------------------------------
# DEFINITIONS
#-------------------------------------------------------------------------------

# the current version of the program
VERSION=2.4.0

HELP_MESSAGE="USAGE: $0 [OPTION]...

OPTION:
  -get-temps            show current temperatures of fan speed levels
  -set-default-temps    use default temperatures for fan speed levels
  -set-temps:<numbers>  use custom temperatures for fan speed levels
  -help                 show this help and exit
  -about                show information and exit
  -version              show version and exit"

ABOUT_MESSAGE="asus-fan-control $VERSION
Fan control for ASUS devices running Linux.

Copy"'right 2017-2019 Dominik Salvet
SPDX License Identifier: MIT
https://github.com/dominiksalvet/asus-fan-control'

# a directory for storing static data
DATA_DIR=/usr/share/asus-fan-control

# configuration files directory
CONFIG_DIR=/etc/asus-fan-control

# the base address for fan speed levels configuration
ACPI_FAN_BASE_ADDR=1335

# fallback temperatures that are about to be used when no notebook model matches
FALLBACK_TEMPS='55 60 62 65 68 72 76 80'

# DESCRIPTION:
#   Check if program is able to perform an ACPI call.
acpi_call_prepare() {
    # check if 'acpi_call' module loaded
    if ! lsmod | grep -q -E -e '^[[:blank:]]*acpi_call[[:blank:]].*$'; then
        echo "$0: Required module 'acpi_call' is not loaded.
POSSIBLE SOLUTIONS:
  * Install program dependencies.
  * Reboot your device." >&2
        return 1
    fi
    
    # check if the interface file for 'acpi_call' module exists
    if [ ! -f /proc/acpi/call ]; then
        echo "$0: Interface file '/proc/acpi/call' for 'acpi_call' module doesn't exist.
POSSIBLE SOLUTIONS:
  * Install program dependencies.
  * Reboot your device." >&2
        return 1
    fi

    # check if running as root
    if [ "$(id -u)" -ne 0 ]; then
        echo "$0: Please run as root." >&2
        return 1
    fi

    # create configuration directory to prevent copying old files when updating
    mkdir -p "$CONFIG_DIR/" || {
        echo "$0: Can't create a directory for configuration files.
POSSIBLE SOLUTIONS:
  * Free up some storage space.
  * Contact an asus-fan-control developer." >&2
        return 1
    }
}

# DESCRIPTION:
#   Check if given fan speed level temperatures are valid.
# PARAMETERS:
#   $1 - temperatures in degrees Celsius
valid_temps() {
    LOCAL_temp_counter=0
    LOCAL_previous_temp=0
    for LOCAL_temp in $1; do
        # fail if parameter is not a number in range 1-99 or has less or equal value to the previous one
        if ! echo "$LOCAL_temp" | grep -q -E -e '^[1-9][0-9]?$' || [ "$LOCAL_temp" -le "$LOCAL_previous_temp" ]; then
            return 1
        fi
        LOCAL_temp_counter=$((LOCAL_temp_counter + 1))
        LOCAL_previous_temp="$LOCAL_temp"
    done
    
    # fail if there is not exactly 8 temperature values
    if [ "$LOCAL_temp_counter" -ne 8 ]; then
        return 1
    fi
}

# DESCRIPTION:
#   Return the temperatures that are about to being applied.
get_temps_to_apply() {
    if [ -r "$CONFIG_DIR/custom-temps" ]; then # if the file of custom temperatures exists and is readable
        LOCAL_custom_temps="$(head -n 1 "$CONFIG_DIR/custom-temps")" # get the first line of it
        if valid_temps "$LOCAL_custom_temps"; then # if these temperatures are valid
            LOCAL_temps="$LOCAL_custom_temps" # use them
        else # warning about corrupted stored temperatures
            echo "$0: Stored custom temperatures are invalid, using the model default ones.
POSSIBLE SOLUTIONS:
  * Use command 'sudo $0 -set-default-temps'.
  * Use command 'sudo $0 -set-temps:<numbers>' with valid temperatures." >&2
            LOCAL_temps="$(get_device_default_temps)"
        fi
    else # no custom temperatures set
        LOCAL_temps="$(get_device_default_temps)"
    fi

    echo "$LOCAL_temps"
}

# DESCRIPTION:
#   Write given temperatures to be applied using ACPI calls.
# PARAMETERS:
#   $1 - temperatures in degrees Celsius
set_acpi_temps() {
    # set each individual fan speed level
    LOCAL_speed_level=0
    for LOCAL_temp in $1; do
        # ACPI call - write
        echo '\_SB.PCI0.LPCB.EC0.WRAM '$((ACPI_FAN_BASE_ADDR + LOCAL_speed_level))" $LOCAL_temp" > /proc/acpi/call
        # next level
        LOCAL_speed_level=$((LOCAL_speed_level + 1))
    done
}

# DESCRIPTION:
#   Returns default temperatures for currently used ASUS notebook model.
get_device_default_temps() {
    if [ -r "$DATA_DIR/default-temps" ]; then
        LOCAL_model="$(dmidecode -s system-product-name)"
        LOCAL_temps="$(grep -m 1 -E -e "$LOCAL_model" "$DATA_DIR/default-temps" | sed -E -e 's|^'"$LOCAL_model"' ||')"
        if ! valid_temps "$LOCAL_temps"; then
            echo "$0: Missing temperatures for your notebook model or they are invalid. Falling back to the UX430UA temperatures.
POSSIBLE SOLUTIONS:
  * Uninstall asus-fan-control and install it again.
  * Contact an asus-fan-control developer." >&2
            LOCAL_temps="$FALLBACK_TEMPS"
        fi
    else
        echo "$0: Can't access the file with default temperatures for notebook models. Falling back to the UX430UA temperatures.
POSSIBLE SOLUTIONS:
  * Uninstall asus-fan-control and install it again.
  * Contact an asus-fan-control developer." >&2
        LOCAL_temps="$FALLBACK_TEMPS"
    fi

    echo "$LOCAL_temps"
}

#-------------------------------------------------------------------------------
# PROCESSING PARAMETERS
#-------------------------------------------------------------------------------

# processing each parameter separately
for i in "$@"; do
    case "$i" in
        -get-temps)
            # check if an ACPI call can be performed (includes root check)
            acpi_call_prepare || exit

            # get each individual fan speed level
            speed_level=0
            acpi_temps=''
            for _ in $FALLBACK_TEMPS; do
                # ACPI call - read
                echo '\_SB.PCI0.LPCB.EC0.RRAM '$((ACPI_FAN_BASE_ADDR + speed_level)) > /proc/acpi/call
                # get hexadecimal value from ACPI message
                acpi_temp="$(cut -c1-4 /proc/acpi/call)"
                # convert it to decimal and add to the list
                acpi_temps="${acpi_temps}$((acpi_temp)) "
                # next level
                speed_level=$((speed_level + 1))
            done
        
            # show the temperatures and remove the last space
            echo "$acpi_temps" | sed -E -e 's/ $//'
            ;;
        -set-default-temps)
            # check if an ACPI call can be performed (includes root check)
            acpi_call_prepare || exit

            # remove custom temperatures configuration file if it exists
            [ -f "$CONFIG_DIR/custom-temps" ] && rm "$CONFIG_DIR/custom-temps"

            # set temperatures using an ACPI call
            set_acpi_temps "$(get_temps_to_apply)"
            ;;
        -set-temps:*)
            # check if an ACPI call can be performed (includes root check)
            acpi_call_prepare || exit

            # parse temperatures of this parameter
            custom_temps="$(echo "$i" | sed -E -e 's/^-set-temps://')"

            if [ "$custom_temps" = "$(get_device_default_temps)" ]; then # if given temperatures are the same as the default ones
                # remove custom temperatures configuration file if it exists
                [ -f "$CONFIG_DIR/custom-temps" ] && rm "$CONFIG_DIR/custom-temps"
            elif valid_temps "$custom_temps"; then # else if they are valid
                echo "$custom_temps" > "$CONFIG_DIR/custom-temps" || {
                    echo "$0: Can't create a configuration file with custom temperatures.
POSSIBLE SOLUTIONS:
  * Free up some storage space.
  * Contact an asus-fan-control developer." >&2
                    exit 1
                }
            else
                echo "$0: Entered custom temperatures are invalid, use the valid ones." >&2
                exit 1
            fi

            # set temperatures using an ACPI call
            set_acpi_temps "$(get_temps_to_apply)"
            ;;
        -help)
            echo "$HELP_MESSAGE"
            exit 0
            ;;
        -about)
            echo "$ABOUT_MESSAGE"
            exit 0
            ;;
        -version)
            echo "$VERSION"
            exit 0
            ;;
        *)
            echo "$0: The option '$i' was not recognized.
POSSIBLE SOLUTIONS:
  * Use the '$0 -help' command for getting help." >&2
            exit 1
            ;;
    esac
done

#-------------------------------------------------------------------------------
# APPLY CONFIGURATION WHEN NO ARGUMENTS
#-------------------------------------------------------------------------------

if [ "$#" -eq 0 ]; then # if no arguments provided
    # check if an ACPI call can be performed (includes root check)
    acpi_call_prepare || exit

    # set temperatures using an ACPI call
    set_acpi_temps "$(get_temps_to_apply)"
fi
