#!/bin/sh

#-------------------------------------------------------------------------------
# Copyright 2017-2020 Dominik Salvet
# github.com/dominiksalvet/asus-fan-control
#-------------------------------------------------------------------------------
# DESCRIPTION:
#   This is asus-fan-control, fan control for ASUS devices running Linux.
# PARAMETERS:
#   All given arguments are processed as asus-fan-control's help describes.
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# MAIN FUNCTION
#-------------------------------------------------------------------------------

# DESCRIPTION:
#   This is the asus-fan-control entry point and it is expected to be executed
#   first, yet its calling should be at the end of this script.
# PARAMETERS:
#   $@ - asus-fan-control arguments
main() {
    check_sw_deps &&
    init_constants &&
    init_strings &&
    process_args "$@" # process all given asus-fan-control arguments
}

# DESCRIPTION:
#   Checks whether all software dependencies are satisfied.
check_sw_deps() (
    # a list of required software
    sw_deps='command echo [ cut'

    # check if any piece of software is missing
    for sw_dep in $sw_deps; do
        if ! command -v "$sw_dep" > /dev/null; then
            echo "missing $sw_dep software" >&2; return 1
        fi
    done
)

#-------------------------------------------------------------------------------
# STATIC INITIALIZATION
#-------------------------------------------------------------------------------

# DESCRIPTION:
#   Initializes static constants.
init_constants() {
    # the current version of asus-fan-control
    readonly VERSION=2.12.0
}

# DESCRIPTION:
#   Initializes strings used to display output to end users. Constants must be
#   already initialized.
init_strings() {
    readonly HELP_MESSAGE="USAGE:
  asus-fan-control [set-temps default | TEMPERATURES]
  asus-fan-control get-temps | help | about

COMMAND:
  set-temps  store and set fan temperatures
  get-temps  get fan temperatures"

    readonly ABOUT_MESSAGE="asus-fan-control $VERSION
Fan control for ASUS devices running Linux.

Copyright 2017-2020 Dominik Salvet
github.com/dominiksalvet/asus-fan-control"
}

#-------------------------------------------------------------------------------
# ARGUMENT PROCESSING
#-------------------------------------------------------------------------------

# DESCRIPTION:
#   Processes given asus-fan-control arguments and performs all associated
#   operations.
# PARAMETERS:
#   $@ - asus-fan-control arguments
process_args() (
    case "$1" in # process arguments based on the first argument
        '') echo 'no argument' ;;
        set-temps) echo 'set-temps argument' ;;
        get-temps) echo 'get-temps argument' ;;
        help) echo "$HELP_MESSAGE" ;;
        about) echo "$ABOUT_MESSAGE" ;;
        *) echo "invalid argument $1" >&2; return 1 ;;
    esac
)

#-------------------------------------------------------------------------------
# ACPI CALLS
#-------------------------------------------------------------------------------

# DESCRIPTION:
#   Get temperatures using ACPI calls based on a given base address and the
#   number of the temperatures.
# PARAMETERS:
#   $1 - base address
#   $2 - number of temperatures
get_acpi_temps() (
    temps= # list of read temperatures

    temp_count=0 # current temperature index
    while [ "$temp_count" -lt "$2" ]; do # read all temperatures
        # perform ACPI call with the current temperature index
        echo "$TODOREAD $(($1 + temp_count))" > "$TODOCALL" &&
        temp="$(cut -c 1-4 "$TODOCALL")" && # parse temperature of output
        temp="$((temp))" && # convert from hexadecimal to decimal
        temps="${temps}$temp " && # add temperature to list
        temp_count="$((temp_count + 1))" || return # next temperature
    done

    echo "${temps% }" # print read temperatures (omitting the last space)
)

# DESCRIPTION:
#   Set given temperatures using ACPI calls based on a given base address.
# PARAMETERS:
#   $1 - base address
#   $@ - temperatures
set_acpi_temps() (
    base_addr="$1" # store base address
    shift && # shift arguments to temperatures

    temp_count=0 && # current temperature index
    for temp in "$@"; do # for each temperature
        # perform ACPI call with the current temperature
        echo "$TODOWRITE $((base_addr + temp_count)) $temp" > "$TODOCALL" &&
        temp_count="$((temp_count + 1))" || return # next temperature
    done
)

#-------------------------------------------------------------------------------
# CALL MAIN
#-------------------------------------------------------------------------------

main "$@" # call the main function, having all functions above already defined
