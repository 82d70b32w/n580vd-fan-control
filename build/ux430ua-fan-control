#!/bin/sh

#-------------------------------------------------------------------------------
# Copyright 2017-2018 Dominik Salvet
# SPDX-License-Identifier: MIT
# https://gitlab.com/dominiksalvet/ux430ua-fan-control
#-------------------------------------------------------------------------------


#-------------------------------------------------------------------------------
# SOFTWARE DEPENDENCIES
#-------------------------------------------------------------------------------

# list of required software
SW_REQUIRED='command echo [ grep lsmod head id rm cut mkdir sed'

# check if some software is missing
for i in $SW_REQUIRED; do
    # software is missing if at least one piece of software is missing
    if ! command -v "$i" > /dev/null; then
        echo "$0: Required software '$i' is missing." >&2
        exit 1
    fi
done

#-------------------------------------------------------------------------------
# DEFINITIONS
#-------------------------------------------------------------------------------

# the current version of the program
VERSION=2.0.1

HELP_MESSAGE="USAGE: $0 [OPTION]...

OPTION:
  -get-temps            show current temperatures of fan speed levels and exit
  -set-default-temps    use default temperatures for fan speed levels
  -set-temps:<numbers>  use custom temperatures for fan speed levels
  -help                 show this help and exit
  -about                show information and exit
  -version              show version and exit"

ABOUT_MESSAGE="ux430ua-fan-control $VERSION
Set up fan speed policy of ASUS ZenBook UX430UA to make it more quiet on Linux.

Copy"'right 2017-2018 Dominik Salvet
SPDX License Identifier: MIT
https://gitlab.com/dominiksalvet/ux430ua-fan-control'

# configuration files directory
CONFIG_DIR=/etc/ux430ua-fan-control

# the base address for fan speed levels configuration
CONFIG_BASE_ADDR=1335

# list of default values of temperatures (in degrees Celsius) per each fan speed level
TEMPS='55 60 62 65 68 72 76 80'

# DESCRIPTION:
#   Check conditions to perform an ACPI call.
acpi_check() {
    # check if 'acpi_call' module loaded
    if ! lsmod | grep -q -E -e '^[[:blank:]]*acpi_call[[:blank:]].*$'; then
        echo "$0: Required module 'acpi_call' is not loaded.
POSSIBLE SOLUTIONS:
  * Install program dependencies.
  * Reboot your device." >&2
        return 1
    fi
    
    # check if the interface file for 'acpi_call' module exists
    if [ ! -f /proc/acpi/call ]; then
        echo "$0: Interface file '/proc/acpi/call' for 'acpi_call' module doesn't exist.
POSSIBLE SOLUTIONS:
  * Install program dependencies.
  * Reboot your device." >&2
        return 1
    fi

    # check if running as root
    if [ "$(id -u)" -ne 0 ]; then
        echo "$0: Please run as root." >&2
        return 1
    fi
}

# DESCRIPTION:
#   Read currently applied temperatures using ACPI calls.
acpi_read_temps() {
    acpi_check || return # check if an ACPI call can be performed

    # get each individual fan speed level
    speed_level=0
    acpi_temps=''
    for _ in $TEMPS; do
        # ACPI call - read
        echo '\_SB.PCI0.LPCB.EC0.RRAM '$((CONFIG_BASE_ADDR + speed_level)) > /proc/acpi/call
        # get hexadecimal value from ACPI message
        acpi_temp="$(cut -c1-4 /proc/acpi/call)"
        # convert it to decimal and add to the list
        acpi_temps="${acpi_temps}$((acpi_temp)) "
        # next level
        speed_level=$((speed_level + 1))
    done

    # show the list and remove last space
    echo "$acpi_temps" | sed -E -e 's/ $//'
}

# DESCRIPTION:
#   Write given temperatures to be applied using ACPI calls.
# PARAMETERS:
#   $1 - temperatures in degrees Celsius
acpi_write_temps() {
    acpi_check || return # check if an ACPI call can be performed

    # set each individual fan speed level
    speed_level=0
    for temp in $1; do
        # ACPI call - write
        echo '\_SB.PCI0.LPCB.EC0.WRAM '$((CONFIG_BASE_ADDR + speed_level))" $temp" > /proc/acpi/call
        # next level
        speed_level=$((speed_level + 1))
    done
}

# DESCRIPTION:
#   Check if given fan speed level temperatures are valid.
# PARAMETERS:
#   $1 - temperatures in degrees Celsius
valid_temps() {
    temp_counter=0
    previous_temp=0
    for temp in $1; do
        # fail if parameter is not a number in range 1-99 or has less or equal value to the previous one
        if ! echo "$temp" | grep -q -E -e '^[1-9][0-9]?$' || [ "$temp" -le "$previous_temp" ]; then
            return 1
        fi
        temp_counter=$((temp_counter + 1))
        previous_temp="$temp"
    done
    
    # fail if there is not exactly 8 temperature values
    if [ "$temp_counter" -ne 8 ]; then
        return 1
    fi
}

# DESCRIPTION:
#   Prepare temperatures to be applied. If entered temperatures differ from the default ones, store them locally.
# PARAMETERS:
#   $1 - user-entered temperatures
prepare_temps() {
    if [ "$1" = "$TEMPS" ]; then # if given temperatures are the same as the default ones
        # remove custom temperatures configuration file if it is not necessary to store it
        [ -f "$CONFIG_DIR/custom-temps" ] && rm "$CONFIG_DIR/custom-temps"
    elif valid_temps "$1"; then # else if they are valid
        mkdir -p "$CONFIG_DIR/" &&
        echo "$1" > "$CONFIG_DIR/custom-temps" || {
            echo "$0: Can't create a configuration file for custom temperatures.
POSSIBLE SOLUTIONS:
  * Free up some storage space.
  * Contact a ux430ua-fan-control developer." >&2
            return 1
        }
    else
        echo "$0: Entered custom temperatures are invalid, use the valid ones." >&2
        return 1
    fi
}

# DESCRIPTION:
#   Return the temperatures that are about to being applied.
get_temps() {
    temps="$TEMPS" # use the default temperatures at the beginning
    if [ -f "$CONFIG_DIR/custom-temps" ]; then # if the file of custom temperatures exists
        custom_temps="$(head -n 1 "$CONFIG_DIR/custom-temps")" # get the first line of it
        if valid_temps "$custom_temps"; then # if these temperatures are valid
            temps="$custom_temps" # use them
        else # warning about corrupted stored temperatures
            echo "$0: Stored custom temperatures are invalid, using the default ones.
POSSIBLE SOLUTIONS:
  * Use command 'sudo $0 -set-default-temps'.
  * Use command 'sudo $0 -set-temps:<numbers>' with valid temperatures." >&2
        fi
    fi

    echo "$temps"
}

#-------------------------------------------------------------------------------
# PROCESSING PARAMETERS
#-------------------------------------------------------------------------------

# processing each parameter separately
for i in "$@"; do
    case "$i" in
        -get-temps)
            acpi_read_temps || exit
            exit 0
            ;;
        -set-default-temps)
            acpi_write_temps "$TEMPS" # apply temperatures

            # remove custom temperatures configuration file to apply using the default temperatures
            [ -f "$CONFIG_DIR/custom-temps" ] && rm "$CONFIG_DIR/custom-temps"            
            ;;
        -set-temps:*)
            # parse temperatures from this option
            entered_temps="$(echo "$i" | sed -E -e 's/^-set-temps://')"

            # prepare temperatures to be applied
            prepare_temps "$entered_temps" || exit
            # get temperatures to be applied
            acpi_write_temps "$(get_temps)"
            ;;
        -help)
            echo "$HELP_MESSAGE"
            exit 0
            ;;
        -about)
            echo "$ABOUT_MESSAGE"
            exit 0
            ;;
        -version)
            echo "$VERSION"
            exit 0
            ;;
        *)
            echo "$0: The option '$i' was not recognized.
POSSIBLE SOLUTIONS:
  * Use the '$0 -help' command for getting help." >&2
            exit 1
            ;;
    esac
done

#-------------------------------------------------------------------------------
# APPLY CONFIGURATION WHEN NO ARGUMENTS
#-------------------------------------------------------------------------------

if [ "$#" -eq 0 ]; then # if no arguments provided
    # get temperatures to be applied
    acpi_write_temps "$(get_temps)"
fi
