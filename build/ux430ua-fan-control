#!/bin/sh

#-------------------------------------------------------------------------------
# Copyright 2017-2018 Dominik Salvet
# SPDX-License-Identifier: MIT
# https://gitlab.com/dominiksalvet/ux430ua-fan-control
#-------------------------------------------------------------------------------


#-------------------------------------------------------------------------------
# SOFTWARE DEPENDENCIES
#-------------------------------------------------------------------------------

# list of required software
SW_REQUIRED='command echo [ grep lsmod head id rm cut'

# check if some software is missing
for i in $SW_REQUIRED; do
    # software is missing if at least one piece of software is missing
    if ! command -v "$i" > /dev/null; then
        echo "$0: Required software '$i' is missing, action canceled." >&2
        exit 1
    fi
done

# check if 'acpi_call' module loaded
if ! lsmod | grep -q -E -e '^[[:blank:]]*acpi_call[[:blank:]].*$'; then
    echo "$0: Required module 'acpi_call' is not loaded, action canceled.
POSSIBLE SOLUTIONS:
  * install program dependencies
  * reboot your device" >&2
    exit 1
fi

# check if interface file for 'acpi_call' module exists
if [ ! -f /proc/acpi/call ]; then
    echo "$0: Interface file '/proc/acpi/call' for 'acpi_call' module doesn't exist, action canceled.
POSSIBLE SOLUTIONS:
  * install program dependencies
  * reboot your device" >&2
    exit 1
fi

#-------------------------------------------------------------------------------
# DEFINITIONS
#-------------------------------------------------------------------------------

# the current version of the program
VERSION=1.1.0

HELP_MESSAGE="Usage: $0 [OPTION]...

OPTION:
  -get-temps          display current temperatures of fan speed levels and exit
  -set-default-temps  use default temperatures for fan speed levels
  -set-temps:NUMBERS  use custom temperatures for fan speed levels
  -help               display this help and exit
  -about              display information and exit
  -version            display version and exit"

ABOUT_MESSAGE="ux430ua-fan-control $VERSION
Set up fan speed policy of ASUS ZenBook UX430UA to make it more quiet on Linux.

Copyright 2017-2018 Dominik Salvet
SPDX-License-Identifier: MIT
https://gitlab.com/dominiksalvet/ux430ua-fan-control"

# configuration files directory
CONFIG_DIR=/etc/ux430ua-fan-control-config

# the base address for fan speed levels configuration
CONFIG_BASE_ADDR=1335

# list of default values of temperatures (in degrees Celsius) per each fan speed level
TEMPS='55 60 62 65 68 72 76 80'

# DESCRIPTION:
#   Check if running as root.
root_check() {
    if [ "$(id -u)" -ne 0 ]; then
        echo "$0: Please run as root, action canceled." >&2
        return 1
    fi
}

# DESCRIPTION:
#   Check if given fan speed level temperatures are valid.
# PARAMETERS:
#   $1 - temperatures in degrees Celsius
check_temps() {
    temp_counter=0
    previous_temp=0
    for temp in $1; do
        # fail if parameter is not a number in range 1-99 or has less or equal value to the previous one
        if ! echo "$temp" | grep -q -E -e '^[1-9][0-9]?$' || [ "$temp" -le "$previous_temp" ]; then
            return 1
        fi
        temp_counter=$((temp_counter + 1))
        previous_temp="$temp"
    done
    
    # fail if there is not exactly 8 temperature values
    if [ "$temp_counter" -ne 8 ]; then
        return 1
    fi
}

#-------------------------------------------------------------------------------
# PROCESSING PARAMETERS
#-------------------------------------------------------------------------------

# processing each parameter separately
for i in "$@"; do
    case "$i" in
        -get-temps)
            root_check || exit 1

            # get each individual fan speed level
            speed_level=0
            acpi_temps=''
            for _ in $TEMPS; do
                # ACPI call - read
                echo '\_SB.PCI0.LPCB.EC0.RRAM '$((CONFIG_BASE_ADDR + speed_level)) > /proc/acpi/call
                # get hexadecimal value from ACPI message
                acpi_temp="$(cut -c1-4 /proc/acpi/call)"
                # convert it to decimal and add to the list
                acpi_temps="${acpi_temps}$((acpi_temp)) "
                # next level
                speed_level=$((speed_level + 1))
            done
            # display the list and remove last space
            echo "$acpi_temps" | sed -E -e 's/ $//'

            exit 0
            ;;
        -set-default-temps)
            ENTERED_TEMPS="$TEMPS"
            ;;
        -set-temps:*)
            ENTERED_TEMPS="$(echo "$i" | sed -E -e 's/^-set-temps://')"
            if [ -z "$ENTERED_TEMPS" ]; then
                echo "$0: Empty temperatures are invalid, action canceled." >&2
                exit 1
            fi
            ;;
        -help)
            echo "$HELP_MESSAGE"
            exit 0
            ;;
        -about)
            echo "$ABOUT_MESSAGE"
            exit 0
            ;;
        -version)
            echo "$VERSION"
            exit 0
            ;;
        *)
            echo "$0: The option '$i' was not recognized.
Try '$0 -help' for more information." >&2
            exit 1
            ;;
    esac
done

#-------------------------------------------------------------------------------
# APPLY CONFIGURATION
#-------------------------------------------------------------------------------

root_check || exit 1

# check if user-defined temperatures provided
if [ ! -z "$ENTERED_TEMPS" ]; then
    if [ "$ENTERED_TEMPS" = "$TEMPS" ]; then
        [ -f "$CONFIG_DIR/temps" ] && rm "$CONFIG_DIR/temps"
    elif check_temps "$ENTERED_TEMPS"; then
        echo "$ENTERED_TEMPS" > "$CONFIG_DIR/temps"
    else
        echo "$0: Entered custom temperatures are invalid, action canceled." >&2
        exit 1
    fi
fi

# get temperatures to apply
if [ -f "$CONFIG_DIR/temps" ]; then
    config_temps="$(head -n 1 "$CONFIG_DIR/temps")"
    if check_temps "$config_temps"; then
        TEMPS="$config_temps"
    else
        echo "$0: Stored custom temperatures are invalid, using the default ones.
POSSIBLE SOLUTIONS:
  * use command 'sudo $0 -set-default-temps'
  * use command 'sudo $0 -set-temps:NUMBERS' with valid temperatures" >&2
    fi
fi

# set up each individual fan speed level
speed_level=0
for temp in $TEMPS; do
    # ACPI call - write
    echo '\_SB.PCI0.LPCB.EC0.WRAM '$((CONFIG_BASE_ADDR + speed_level))" $temp" > /proc/acpi/call
    # next level
    speed_level=$((speed_level + 1))
done
