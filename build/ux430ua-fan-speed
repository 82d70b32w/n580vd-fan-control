#!/bin/sh

#-------------------------------------------------------------------------------
# Copyright 2017-2018 Dominik Salvet
# SPDX-License-Identifier: MIT
# https://gitlab.com/dominiksalvet/ux430ua-fan-speed
#-------------------------------------------------------------------------------


#-------------------------------------------------------------------------------
# SOFTWARE DEPENDENCIES
#-------------------------------------------------------------------------------

# list of required software
SW_REQUIRED='echo [ cat printf grep'

# check if some software is missing
for i in $SW_REQUIRED; do
    # software is missing if at least one piece of software is missing
    if ! command -v "$i" > /dev/null; then
        echo "$0: Required software '$i' is missing, installation canceled." >&2
        exit 1
    fi
done

#-------------------------------------------------------------------------------
# PROGRAM OUTPUT INFORMATION
#-------------------------------------------------------------------------------

# the current version of the program
VERSION='1.0.0'

HELP_MESSAGE="Usage: $0 [OPTION]...

OPTION:
  -help     display this help and exit
  -about    display information and exit
  -version  display version and exit"

ABOUT_MESSAGE="ux430ua-fan-speed $VERSION
Set up fan speed policy of ASUS ZenBook UX430UA to make it more quiet on Linux.

Copyright 2017-2018 Dominik Salvet
SPDX-License-Identifier: MIT
https://gitlab.com/dominiksalvet/ux430ua-fan-speed"

HINT_MESSAGE="Try '$0 -help' for more information."

#-------------------------------------------------------------------------------
# PROCESSING PARAMETERS
#-------------------------------------------------------------------------------

# processing each parameter separately
for i in "$@"; do
    case "$i" in
        -help)
            echo "$HELP_MESSAGE"
            exit 0
            ;;
        -about)
            echo "$ABOUT_MESSAGE"
            exit 0
            ;;
        -version)
            echo "$VERSION"
            exit 0
            ;;
        *)
            echo "$0: The option '$i' was not recognized." >&2
            echo "$HINT_MESSAGE" >&2
            exit 1
            ;;
    esac
done

#-------------------------------------------------------------------------------
# DEFINITIONS
#-------------------------------------------------------------------------------

# list of ascending values of temperatures (in degrees Celsius) per each fan speed level
FAN_TEMPS='55 60 62 65 68 72 76 80'

# the base address for fan speed levels configuration
CONFIG_BASE_ADDR=1335

# DESCRIPTION:
#   Set temperature boundary to a chosen fan speed level.
# PARAMETERS:
#   $1 - fan speed level (0-7)
#   $2 - temperature in degrees Celsius
set_temp_boundary() {
    # direct ACPI call
    echo '\_SB.PCI0.LPCB.EC0.WRAM '"$((CONFIG_BASE_ADDR + $1)) $2" > /proc/acpi/call
    cat /proc/acpi/call
    # previous command misses a new line character, so echo new line
    echo
}

#-------------------------------------------------------------------------------
# APPLY CONFIGURATION
#-------------------------------------------------------------------------------

# check if running as root
if [ "$(id -u)" -ne 0 ]; then
    echo "$0: Please run as root, action canceled." >&2
    exit 1
fi

# check "FAN_TEMPS" length
if ! echo "$FAN_TEMPS" | grep -q -E -e '^([1-9][0-9]* ){7}[1-9][0-9]*$'; then
    echo "$0: Length of the \"FAN_TEMPS\" array must be exactly 8, configuration canceled." >&2
    exit 1
fi

# setup each individual fan speed level
i=0
for temp in $FAN_TEMPS; do
    set_temp_boundary "$i" "$temp"
    i=$((i + 1))
done
